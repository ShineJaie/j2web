# Root logger option
log4j.rootLogger=INFO, stdout, file

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Redirect log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
#outputs to Tomcat home
log4j.appender.file.File=${catalina.home}/logs/sjlog/myapp.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

#########################################################

# (1) 输出方式 appender 一般有5种：
#     org.apache.log4j.RollingFileAppender (滚动文件, 自动记录最新日志)
#     org.apache.log4j.ConsoleAppender (控制台)
#     org.apache.log4j.FileAppender (文件)
#     org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)
#     org.apache.log4j.WriterAppender (将日志信息以流格式发送到任意指定的地方)

# (2) 日志记录的优先级 priority, 优先级由高到低分为
#     OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL.
#     Log4j 建议只使用 FATAL, ERROR, WARN, INFO, DEBUG 这五个级别.

# (3) 格式说明 layout 中的参数都以 % 开始, 后面不同的参数代表不同的格式化信息(参数按字母表顺序列出)
#     %c    输出所属类的全名, 可在修改为 %c{Num}, Num 类名输出的维(如: "org.apache.elathen.ClassName", %c{2} 将输出 elathen.ClassName)
#     %d    输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}, 可指定格式, 如 %d{HH:mm:ss}
#     %L    输出日志事件发生位置, 包括类目名, 发生线程, 在代码中的行数
#     %n    换行符
#     %m    输出代码指定信息, 如 info("message"), 输出 message
#     %p    输出优先级, 即 FATAL, ERROR 等
#     %r    输出从启动到显示该 log 信息所耗费的毫秒数
#     %t    输出产生该日志事件的线程名

#########################################################

# 在 controller 中使用 log4j

# private static final Logger logger = Logger.getLogger(WelcomeController.class);